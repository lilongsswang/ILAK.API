// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 15.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ILAK.API.CodeGenerate.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\data\ILAK\ILAK.API\ILAK.API\CodeGenerate\Templates\ProjectFileTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ProjectFileTemplate : ProjectFileTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""15.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProjectGuid>{");
            
            #line 14 "E:\data\ILAK\ILAK.API\ILAK.API\CodeGenerate\Templates\ProjectFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GUIDString));
            
            #line default
            #line hidden
            this.Write(@"}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <RootNamespace>TempRestHostService</RootNamespace>
    <AssemblyName>TempRestHostService</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\..\Deployments\Project");
            
            #line 37 "E:\data\ILAK\ILAK.API\ILAK.API\CodeGenerate\Templates\ProjectFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjCode));
            
            #line default
            #line hidden
            this.Write("\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>pr" +
                    "ompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <I" +
                    "temGroup>\r\n    <Reference Include=\"Hyd.Frame.Extension\">\r\n      <HintPath>..\\Ref" +
                    "erences\\Hyd.Frame.Extension.dll</HintPath>\r\n    </Reference>\r\n    <Reference Inc" +
                    "lude=\"Newtonsoft.Json, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe" +
                    "6b2a6aeed, processorArchitecture=MSIL\">\r\n      <HintPath>..\\packages\\Newtonsoft." +
                    "Json.10.0.3\\lib\\net45\\Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n    <Ref" +
                    "erence Include=\"SqlSugar, Version=4.6.0.6, Culture=neutral, processorArchitectur" +
                    "e=MSIL\">\r\n      <HintPath>..\\packages\\sqlSugar.4.6.0.6\\lib\\SqlSugar.dll</HintPat" +
                    "h>\r\n    </Reference>\r\n    <Reference Include=\"System\" />\r\n    <Reference Include" +
                    "=\"System.Configuration.Install\" />\r\n    <Reference Include=\"System.Core\" />\r\n   " +
                    " <Reference Include=\"System.Runtime.Serialization\" />\r\n    <Reference Include=\"S" +
                    "ystem.ServiceModel\" />\r\n    <Reference Include=\"System.ServiceModel.Activation\" " +
                    "/>\r\n    <Reference Include=\"System.ServiceModel.Web\" />\r\n    <Reference Include=" +
                    "\"System.Web\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Inc" +
                    "lude=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"Microsoft.CShar" +
                    "p\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.N" +
                    "et.Http\" />\r\n    <Reference Include=\"System.ServiceProcess\" />\r\n    <Reference I" +
                    "nclude=\"System.Xml\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"Com" +
                    "mon\\BusinessException.cs\" />\r\n    <Compile Include=\"Common\\JsonTool.cs\" />\r\n    " +
                    "<Compile Include=\"Common\\Messages.cs\" />\r\n    <Compile Include=\"Common\\ParaRoot." +
                    "cs\" />\r\n    <Compile Include=\"Common\\ProjGenOptions.cs\" />\r\n    <Compile Include" +
                    "=\"Common\\PropertyUtil.cs\" />\r\n    <Compile Include=\"Common\\RetBase.cs\" />\r\n    <" +
                    "Compile Include=\"Common\\SqlSugarUtils.cs\" />\r\n    <Compile Include=\"Controllers\\" +
                    "TemplateController.cs\" />\r\n    <Compile Include=\"Interfaces\\TemplateInterface.cs" +
                    "\" />\r\n    <Compile Include=\"Messages\\TemplateAG.cs\" />\r\n    <Compile Include=\"Pr" +
                    "ojectInstaller.cs\">\r\n      <SubType>Component</SubType>\r\n    </Compile>\r\n    <Co" +
                    "mpile Include=\"ProjectInstaller.Designer.cs\">\r\n      <DependentUpon>ProjectInsta" +
                    "ller.cs</DependentUpon>\r\n    </Compile>\r\n    <Compile Include=\"ProjService.cs\">\r" +
                    "\n      <SubType>Component</SubType>\r\n    </Compile>\r\n    <Compile Include=\"ProjS" +
                    "ervice.Designer.cs\">\r\n      <DependentUpon>ProjService.cs</DependentUpon>\r\n    <" +
                    "/Compile>\r\n    <Compile Include=\"Program.cs\" />\r\n    <Compile Include=\"Propertie" +
                    "s\\AssemblyInfo.cs\" />\r\n    <Compile Include=\"Services\\TemplateService.cs\" />\r\n  " +
                    "</ItemGroup>\r\n  <ItemGroup>\r\n    <None Include=\"App.config\" />\r\n    <None Includ" +
                    "e=\"install.bat\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n " +
                    "   </None>\r\n    <None Include=\"packages.config\" />\r\n  </ItemGroup>\r\n  <ItemGroup" +
                    ">\r\n    <EmbeddedResource Include=\"ProjectInstaller.resx\">\r\n      <DependentUpon>" +
                    "ProjectInstaller.cs</DependentUpon>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n  " +
                    "<ItemGroup>\r\n    <Service Include=\"{508349B6-6B84-4DF5-91F0-309BEEBAD82D}\" />\r\n " +
                    " </ItemGroup>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" " +
                    "/>\r\n</Project>");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "E:\data\ILAK\ILAK.API\ILAK.API\CodeGenerate\Templates\ProjectFileTemplate.tt"

private string _GUIDStringField;

/// <summary>
/// Access the GUIDString parameter of the template.
/// </summary>
private string GUIDString
{
    get
    {
        return this._GUIDStringField;
    }
}

private string _ProjCodeField;

/// <summary>
/// Access the ProjCode parameter of the template.
/// </summary>
private string ProjCode
{
    get
    {
        return this._ProjCodeField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool GUIDStringValueAcquired = false;
if (this.Session.ContainsKey("GUIDString"))
{
    this._GUIDStringField = ((string)(this.Session["GUIDString"]));
    GUIDStringValueAcquired = true;
}
if ((GUIDStringValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("GUIDString");
    if ((data != null))
    {
        this._GUIDStringField = ((string)(data));
    }
}
bool ProjCodeValueAcquired = false;
if (this.Session.ContainsKey("ProjCode"))
{
    this._ProjCodeField = ((string)(this.Session["ProjCode"]));
    ProjCodeValueAcquired = true;
}
if ((ProjCodeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ProjCode");
    if ((data != null))
    {
        this._ProjCodeField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ProjectFileTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
